@echo off
REM Script de deployment para Windows
echo.
echo ========================================
echo  Atualizador Dashboard VCA v2.0
echo  Script de Deployment Windows
echo ========================================
echo.

REM Verificar se Python est√° instalado
python --version >nul 2>&1
if errorlevel 1 (
    echo ERRO: Python nao foi encontrado. Instale Python 3.8+ primeiro.
    pause
    exit /b 1
)

REM Verificar se pip est√° dispon√≠vel
pip --version >nul 2>&1
if errorlevel 1 (
    echo ERRO: pip nao foi encontrado.
    pause
    exit /b 1
)

echo ‚úÖ Python e pip encontrados
echo.

REM Criar ambiente virtual se n√£o existir
if not exist "venv" (
    echo Criando ambiente virtual...
    python -m venv venv
    if errorlevel 1 (
        echo ERRO: Falha ao criar ambiente virtual
        pause
        exit /b 1
    )
    echo ‚úÖ Ambiente virtual criado
) else (
    echo ‚úÖ Ambiente virtual j√° existe
)

REM Ativar ambiente virtual
echo Ativando ambiente virtual...
call venv\Scripts\activate.bat
if errorlevel 1 (
    echo ERRO: Falha ao ativar ambiente virtual
    pause
    exit /b 1
)

REM Atualizar pip
echo Atualizando pip...
python -m pip install --upgrade pip

REM Instalar depend√™ncias
echo Instalando dependencias...
pip install -r requirements.txt
if errorlevel 1 (
    echo ERRO: Falha ao instalar dependencias
    pause
    exit /b 1
)

echo ‚úÖ Depend√™ncias instaladas

REM Instalar depend√™ncias opcionais
echo.
echo Instalando dependencias opcionais...
pip install redis celery structlog flask-limiter flask-wtf psutil 2>nul
echo ‚ö†Ô∏è Algumas dependencias opcionais podem falhar (normal)

REM Criar diret√≥rios necess√°rios
echo.
echo Criando diretorios...
if not exist "uploads" mkdir uploads
if not exist "logs" mkdir logs
if not exist "backups" mkdir backups
echo ‚úÖ Diret√≥rios criados

REM Criar arquivo .env se n√£o existir
if not exist ".env" (
    echo Criando arquivo .env...
    (
        echo # Configura√ß√µes de Desenvolvimento
        echo FLASK_ENV=development
        echo SECRET_KEY=dev-secret-key-change-in-production
        echo PORT=5000
        echo.
        echo # Google Sheets
        echo CREDENTIALS_FILE=credentials.json
        echo.
        echo # Rate Limiting
        echo RATELIMIT_STORAGE_URL=memory://
        echo.
        echo # Logging
        echo LOG_LEVEL=INFO
        echo LOG_FILE=app.log
    ) > .env
    echo ‚úÖ Arquivo .env criado
) else (
    echo ‚úÖ Arquivo .env j√° existe
)

REM Verificar credenciais
if not exist "credentials.json" (
    echo.
    echo ‚ö†Ô∏è ATEN√á√ÉO: credentials.json n√£o encontrado
    echo    Configure as credenciais do Google Sheets antes de usar
    echo.
)

REM Executar testes b√°sicos
echo.
echo Executando testes b√°sicos...
python -c "from app import create_app; app = create_app('development'); print('‚úÖ App pode ser criada')" 2>nul
if errorlevel 1 (
    echo ‚ö†Ô∏è Erro ao importar aplica√ß√£o
) else (
    echo ‚úÖ Aplica√ß√£o importada com sucesso
)

REM Verificar estrutura de arquivos
echo.
echo Verificando estrutura de arquivos...
set missing_files=0

if not exist "app.py" (
    echo ‚ùå app.py n√£o encontrado
    set /a missing_files+=1
) else (
    echo ‚úÖ app.py
)

if not exist "templates\index.html" (
    echo ‚ùå templates\index.html n√£o encontrado
    set /a missing_files+=1
) else (
    echo ‚úÖ templates\index.html
)

if not exist "static\style.css" (
    echo ‚ùå static\style.css n√£o encontrado
    set /a missing_files+=1
) else (
    echo ‚úÖ static\style.css
)

if not exist "requirements.txt" (
    echo ‚ùå requirements.txt n√£o encontrado
    set /a missing_files+=1
) else (
    echo ‚úÖ requirements.txt
)

if %missing_files% gtr 0 (
    echo.
    echo ‚ùå %missing_files% arquivo(s) cr√≠tico(s) n√£o encontrado(s)
    echo Por favor verifique a estrutura do projeto
    pause
    exit /b 1
)

echo.
echo ========================================
echo  ‚úÖ DEPLOYMENT CONCLU√çDO COM SUCESSO!
echo ========================================
echo.
echo üìã Pr√≥ximos passos:
echo.
echo 1. Configure o credentials.json:
echo    - Baixe as credenciais do Google Cloud Console
echo    - Salve como 'credentials.json' na pasta raiz
echo.
echo 2. Ajuste as configura√ß√µes no arquivo .env:
echo    - Defina uma SECRET_KEY segura para produ√ß√£o
echo    - Configure outras vari√°veis conforme necess√°rio
echo.
echo 3. Para iniciar a aplica√ß√£o:
echo    - Execute: python app.py
echo    - Ou use: flask run
echo.
echo 4. Para produ√ß√£o:
echo    - Use gunicorn: pip install gunicorn
echo    - Execute: gunicorn app:app
echo.
echo 5. Acesse: http://localhost:5000
echo.
echo ========================================

REM Perguntar se quer iniciar a aplica√ß√£o
echo.
set /p start_app="Deseja iniciar a aplica√ß√£o agora? (s/n): "
if /i "%start_app%"=="s" (
    echo.
    echo Iniciando aplica√ß√£o...
    echo Pressione Ctrl+C para parar
    echo.
    python app.py
)

echo.
echo Deployment finalizado.
pause
